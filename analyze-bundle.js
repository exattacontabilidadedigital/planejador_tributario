#!/usr/bin/env node

/**
 * üìä BUNDLE ANALYZER - SCRIPT DE AN√ÅLISE R√ÅPIDA
 * 
 * Executa an√°lise do bundle e abre relat√≥rios automaticamente
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç INICIANDO AN√ÅLISE DO BUNDLE...\n');

// Definir ambiente
process.env.ANALYZE = 'true';

try {
  console.log('üì¶ Executando build com an√°lise...');
  
  // Executar build com an√°lise
  execSync('npm run build', { 
    stdio: 'inherit',
    env: { ...process.env, ANALYZE: 'true' }
  });
  
  console.log('\n‚úÖ Build completado com sucesso!');
  
  // Verificar relat√≥rios gerados
  const analyzeDir = path.join(process.cwd(), '.next', 'analyze');
  
  if (fs.existsSync(analyzeDir)) {
    console.log('\nüìà RELAT√ìRIOS GERADOS:');
    
    const files = fs.readdirSync(analyzeDir);
    files.forEach(file => {
      if (file.endsWith('.html')) {
        const filePath = path.join(analyzeDir, file);
        console.log(`   ‚Ä¢ ${file} (${(fs.statSync(filePath).size / 1024).toFixed(1)}KB)`);
      }
    });
    
    // Abrir relat√≥rios no Windows
    if (process.platform === 'win32') {
      console.log('\nüåê Abrindo relat√≥rios no navegador...');
      
      files.forEach(file => {
        if (file.endsWith('.html')) {
          const filePath = path.join(analyzeDir, file);
          try {
            execSync(`start ${filePath}`, { stdio: 'ignore' });
          } catch (error) {
            console.log(`   ‚ö†Ô∏è Erro ao abrir ${file}`);
          }
        }
      });
    } else {
      console.log('\nüìÅ Relat√≥rios dispon√≠veis em: .next/analyze/');
    }
    
  } else {
    console.log('\n‚ö†Ô∏è Diret√≥rio de an√°lise n√£o encontrado');
  }
  
} catch (error) {
  console.error('\n‚ùå ERRO DURANTE A AN√ÅLISE:');
  console.error(error.message);
  
  // Verificar se h√° relat√≥rios parciais
  const analyzeDir = path.join(process.cwd(), '.next', 'analyze');
  if (fs.existsSync(analyzeDir)) {
    console.log('\nüìä Relat√≥rios parciais dispon√≠veis:');
    const files = fs.readdirSync(analyzeDir);
    files.forEach(file => {
      if (file.endsWith('.html')) {
        console.log(`   ‚Ä¢ .next/analyze/${file}`);
      }
    });
    
    console.log('\nüí° Execute: npm run analyze-view para ver relat√≥rios');
  }
}

console.log('\nüìã COMANDOS √öTEIS:');
console.log('   npm run analyze          - Nova an√°lise completa');
console.log('   npm run analyze-view     - Ver relat√≥rios existentes');
console.log('   node analyze-bundle.js   - Este script');

console.log('\nüîç Para an√°lise manual:');
console.log('   1. Abra .next/analyze/nodejs.html');
console.log('   2. Procure chunks > 200kB');
console.log('   3. Identifique bibliotecas n√£o utilizadas');
console.log('   4. Verifique duplica√ß√µes de c√≥digo\n');