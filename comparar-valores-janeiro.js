import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function compararDados() {
  console.log('üîç Buscando cen√°rio de Janeiro...\n')
  
  const { data: cenario, error } = await supabase
    .from('cenarios')
    .select('*')
    .eq('id', 'b9c02d8c-662c-41de-8d06-534dcd7e0d89')
    .single()
  
  if (error || !cenario) {
    console.error('‚ùå Erro:', error)
    return
  }
  
  console.log('üìã CEN√ÅRIO JANEIRO - ESTRUTURA COMPLETA:\n')
  console.log('='.repeat(80))
  
  // CONFIGURA√á√ÉO
  console.log('\n‚öôÔ∏è  CONFIGURA√á√ÉO (dados de entrada):')
  console.log('‚îÄ'.repeat(80))
  const config = cenario.configuracao || {}
  
  console.log('üìä Receitas e Vendas:')
  console.log(`   ‚Ä¢ Receita Bruta: R$ ${(config.receitaBruta || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Vendas Internas: ${config.vendasInternas || 0}%`)
  console.log(`   ‚Ä¢ Percentual ST: ${config.percentualST || 0}%`)
  console.log(`   ‚Ä¢ Percentual Monof√°sico: ${config.percentualMonofasico || 0}%`)
  
  console.log('\nüí∞ Compras e Custos:')
  console.log(`   ‚Ä¢ Compras Internas: R$ ${(config.comprasInternas || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Compras Interestaduais: R$ ${(config.comprasInterestaduais || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ CMV Total: R$ ${(config.cmvTotal || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  
  console.log('\nüìê Al√≠quotas:')
  console.log(`   ‚Ä¢ ICMS Interno: ${config.icmsInterno || 0}%`)
  console.log(`   ‚Ä¢ ICMS Sul: ${config.icmsSul || 0}%`)
  console.log(`   ‚Ä¢ PIS: ${config.pisAliq || 0}%`)
  console.log(`   ‚Ä¢ COFINS: ${config.cofinsAliq || 0}%`)
  console.log(`   ‚Ä¢ IRPJ Base: ${config.irpjBase || 0}%`)
  console.log(`   ‚Ä¢ IRPJ Adicional: ${config.irpjAdicional || 0}%`)
  console.log(`   ‚Ä¢ CSLL: ${config.csllAliq || 0}%`)
  console.log(`   ‚Ä¢ ISS: ${config.issAliq || 0}%`)
  
  console.log('\nüí∏ Despesas:')
  console.log(`   ‚Ä¢ Sal√°rios PF: R$ ${(config.salariosPF || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Energia El√©trica: R$ ${(config.energiaEletrica || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Alugu√©is: R$ ${(config.alugueis || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Outras Despesas: R$ ${(config.outrasDespesas || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  
  // RESULTADOS
  console.log('\n\nüí∞ RESULTADOS (impostos calculados e salvos):')
  console.log('‚îÄ'.repeat(80))
  const resultados = cenario.resultados || {}
  
  console.log('üìä Impostos a Pagar:')
  console.log(`   ‚Ä¢ ICMS: R$ ${(resultados.icmsAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ PIS: R$ ${(resultados.pisAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ COFINS: R$ ${(resultados.cofinsAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ IRPJ: R$ ${(resultados.irpjAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ CSLL: R$ ${(resultados.csllAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ ISS: R$ ${(resultados.issAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ TOTAL: R$ ${(resultados.totalImpostos || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  
  console.log('\nüìà Outros Valores:')
  console.log(`   ‚Ä¢ Receita Bruta Total: R$ ${(resultados.receitaBrutaTotal || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Lucro L√≠quido: R$ ${(resultados.lucroLiquido || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Carga Tribut√°ria: ${(resultados.cargaTributaria || 0).toFixed(2)}%`)
  
  // COMPARA√á√ÉO COM VALORES REAIS
  console.log('\n\nüîç COMPARA√á√ÉO COM VALORES REAIS (que voc√™ informou):')
  console.log('‚îÄ'.repeat(80))
  
  const valoresReais = {
    icms: 279800.00,
    pis: 17721.00,
    cofins: 81624.00,
    irpj: 154212.50,
    csll: 64156.50 // Valor estimado
  }
  
  const valoresCalculados = {
    icms: resultados.icmsAPagar || 0,
    pis: resultados.pisAPagar || 0,
    cofins: resultados.cofinsAPagar || 0,
    irpj: resultados.irpjAPagar || 0,
    csll: resultados.csllAPagar || 0
  }
  
  console.log('\n| Imposto | Valor Real      | Valor Calculado | Diferen√ßa       | Status |')
  console.log('|---------|-----------------|-----------------|-----------------|--------|')
  
  Object.keys(valoresReais).forEach(key => {
    const real = valoresReais[key]
    const calculado = valoresCalculados[key]
    const diferenca = calculado - real
    const percentual = real > 0 ? ((diferenca / real) * 100).toFixed(1) : 0
    const status = Math.abs(diferenca) < 1 ? '‚úÖ' : Math.abs(diferenca) < 1000 ? '‚ö†Ô∏è' : '‚ùå'
    
    console.log(`| ${key.toUpperCase().padEnd(7)} | R$ ${real.toLocaleString('pt-BR', { minimumFractionDigits: 2 }).padEnd(12)} | R$ ${calculado.toLocaleString('pt-BR', { minimumFractionDigits: 2 }).padEnd(12)} | R$ ${diferenca.toLocaleString('pt-BR', { minimumFractionDigits: 2, signDisplay: 'always' }).padEnd(12)} | ${status} ${percentual}%`)
  })
  
  const totalReal = Object.values(valoresReais).reduce((a, b) => a + b, 0)
  const totalCalculado = Object.values(valoresCalculados).reduce((a, b) => a + b, 0)
  const diferencaTotal = totalCalculado - totalReal
  
  console.log('|---------|-----------------|-----------------|-----------------|--------|')
  console.log(`| TOTAL   | R$ ${totalReal.toLocaleString('pt-BR', { minimumFractionDigits: 2 }).padEnd(12)} | R$ ${totalCalculado.toLocaleString('pt-BR', { minimumFractionDigits: 2 }).padEnd(12)} | R$ ${diferencaTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2, signDisplay: 'always' }).padEnd(12)} |`)
  
  console.log('\n' + '='.repeat(80))
  console.log('‚úÖ An√°lise conclu√≠da!')
}

compararDados().catch(console.error)
