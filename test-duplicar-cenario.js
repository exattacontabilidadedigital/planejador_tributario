/**
 * Script para testar a duplica√ß√£o de cen√°rios ap√≥s corre√ß√£o
 */
require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

async function testDuplicarCenario() {
  console.log('üîß [DUPLICAR] Configura√ß√µes:')
  console.log('   URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Definida' : '‚ùå Faltando')
  console.log('   Key:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Definida' : '‚ùå Faltando')

  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå [DUPLICAR] Configura√ß√µes de Supabase n√£o encontradas')
    return
  }

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )

  console.log('üîÑ [DUPLICAR] Iniciando teste de duplica√ß√£o...')

  try {
    // 1. Buscar um cen√°rio existente
    console.log('1Ô∏è‚É£ [DUPLICAR] Buscando cen√°rio existente...')
    const { data: cenarios, error: selectError } = await supabase
      .from('cenarios')
      .select('*')
      .limit(1)

    if (selectError || !cenarios || cenarios.length === 0) {
      console.error('‚ùå [DUPLICAR] Erro ao buscar cen√°rio:', selectError)
      return
    }

    const cenarioOriginal = cenarios[0]
    console.log('‚úÖ [DUPLICAR] Cen√°rio original:', {
      id: cenarioOriginal.id,
      nome: cenarioOriginal.nome,
      empresa_id: cenarioOriginal.empresa_id
    })

    // 2. Simular duplica√ß√£o - criar uma c√≥pia
    const duplicadoData = {
      empresa_id: cenarioOriginal.empresa_id,
      nome: cenarioOriginal.nome + ' (C√≥pia)',
      descricao: cenarioOriginal.descricao,
      ano: cenarioOriginal.ano,
      configuracao: cenarioOriginal.configuracao,
      status: 'rascunho'
    }

    console.log('2Ô∏è‚É£ [DUPLICAR] Criando duplicata...')
    console.log('üìù [DUPLICAR] Dados:', JSON.stringify(duplicadoData, null, 2))

    const { data: duplicado, error: duplicarError } = await supabase
      .from('cenarios')
      .insert(duplicadoData)
      .select()
      .single()

    if (duplicarError) {
      console.error('‚ùå [DUPLICAR] Erro na duplica√ß√£o:', duplicarError)
      return
    }

    console.log('‚úÖ [DUPLICAR] Duplica√ß√£o bem-sucedida!')
    console.log('üìÑ [DUPLICAR] Cen√°rio duplicado:', {
      id: duplicado.id,
      nome: duplicado.nome,
      empresa_id: duplicado.empresa_id,
      configuracao: !!duplicado.configuracao
    })

    // 3. Verificar se os dados est√£o corretos
    if (duplicado.empresa_id === cenarioOriginal.empresa_id) {
      console.log('‚úÖ [DUPLICAR] Empresa_id preservado')
    }
    if (duplicado.configuracao) {
      console.log('‚úÖ [DUPLICAR] Configura√ß√£o preservada')
    }
    if (duplicado.status === 'rascunho') {
      console.log('‚úÖ [DUPLICAR] Status correto (rascunho)')
    }

    // 4. Limpar - deletar a duplicata
    console.log('4Ô∏è‚É£ [DUPLICAR] Limpando duplicata...')
    const { error: deleteError } = await supabase
      .from('cenarios')
      .delete()
      .eq('id', duplicado.id)

    if (deleteError) {
      console.error('‚ö†Ô∏è [DUPLICAR] Erro ao limpar:', deleteError)
    } else {
      console.log('‚úÖ [DUPLICAR] Limpeza conclu√≠da!')
    }

  } catch (error) {
    console.error('üí• [DUPLICAR] Erro inesperado:', error)
  }

  console.log('üèÅ [DUPLICAR] Teste finalizado')
}

testDuplicarCenario()