import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function verificarJaneiroCorrigido() {
  console.log('üîç Verificando cen√°rio de Janeiro corrigido...\n')
  
  const cenarioId = 'b9c02d8c-662c-41de-8d06-534dcd7e0d89'
  
  const { data: cenario, error } = await supabase
    .from('cenarios')
    .select('*')
    .eq('id', cenarioId)
    .single()
  
  if (error) {
    console.error('‚ùå Erro:', error.message)
    return
  }
  
  console.log('üìã CEN√ÅRIO: Janeiro')
  console.log('‚îÄ'.repeat(80))
  
  const resultados = cenario.resultados
  const config = cenario.configuracao
  
  if (!resultados) {
    console.log('‚ùå SEM RESULTADOS!')
    return
  }
  
  console.log('\nüí∞ IMPOSTOS A PAGAR (campo resultados):')
  console.log(`   ‚Ä¢ ICMS........: R$ ${(resultados.icmsAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ PIS.........: R$ ${(resultados.pisAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ COFINS......: R$ ${(resultados.cofinsAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ IRPJ........: R$ ${(resultados.irpjAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ CSLL........: R$ ${(resultados.csllAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ ISS.........: R$ ${(resultados.issAPagar || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`)
  console.log(`   ‚Ä¢ TOTAL.......: R$ ${(resultados.totalImpostos || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  
  console.log('\nüìä TOTALIZADORES:')
  console.log(`   ‚Ä¢ Federais....: R$ ${(resultados.totalImpostosFederais || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Estaduais...: R$ ${(resultados.totalImpostosEstaduais || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Municipais..: R$ ${(resultados.totalImpostosMunicipais || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  
  console.log('\nüíµ RECEITAS E LUCROS:')
  console.log(`   ‚Ä¢ Receita Bruta: R$ ${(config.receitaBruta || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ CMV Total....: R$ ${(config.cmvTotal || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Lucro L√≠quido: R$ ${(resultados.lucroLiquido || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   ‚Ä¢ Carga Trib...: ${(resultados.cargaTributaria || 0).toFixed(2)}%`)
  
  console.log('\n‚úÖ VALORES ESPERADOS PARA O GR√ÅFICO:')
  console.log(`   üîµ Lucro Real: R$ ${(resultados.totalImpostos || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`)
  console.log(`   (Soma de TODOS os impostos)`)
  
  console.log('\n' + '='.repeat(80))
  console.log('‚ú® Janeiro corrigido! Agora o gr√°fico deve mostrar R$ 597.514,00')
}

verificarJaneiroCorrigido().catch(console.error)
